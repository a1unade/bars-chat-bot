name: deploy

on:
  workflow_run:
    workflows: ["build"]
    types: [completed]

jobs:
  deploy-webapi:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: '6.2.x'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.14

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push webapi image
        run: |
          VERSION=${{ steps.gitversion.outputs.semVer }}
          IMAGE=ghcr.io/${{ github.repository_owner }}/bars-chat-bot-webapi
          docker build -t $IMAGE:latest -t $IMAGE:$VERSION -f ./NotifyHub/NotifyHub.WebApi/Dockerfile NotifyHub
          docker push $IMAGE:latest
          docker push $IMAGE:$VERSION

  deploy-gateway:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: deploy-webapi
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: '6.2.x'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.14

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push gateway image
        run: |
          VERSION=${{ steps.gitversion.outputs.semVer }}
          IMAGE=ghcr.io/${{ github.repository_owner }}/bars-chat-bot-gateway
          docker build -t $IMAGE:latest -t $IMAGE:$VERSION -f ./NotifyHub.Gateway/NotifyHub.Gateway/Dockerfile NotifyHub.Gateway
          docker push $IMAGE:latest
          docker push $IMAGE:$VERSION

  deploy-notification:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: deploy-gateway
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: '6.2.x'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.14

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push notification image
        run: |
          VERSION=${{ steps.gitversion.outputs.semVer }}
          IMAGE=ghcr.io/${{ github.repository_owner }}/bars-chat-bot-notification
          docker build -t $IMAGE:latest -t $IMAGE:$VERSION -f ./NotifyHub.NotificationService/NotifyHub.NotificationService.WebApi/Dockerfile NotifyHub.NotificationService
          docker push $IMAGE:latest
          docker push $IMAGE:$VERSION

  deploy-outbox:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: deploy-notification
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: '6.2.x'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.14

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push outbox image
        run: |
          VERSION=${{ steps.gitversion.outputs.semVer }}
          IMAGE=ghcr.io/${{ github.repository_owner }}/bars-chat-bot-outbox
          docker build -t $IMAGE:latest -t $IMAGE:$VERSION -f ./NotifyHub.OutboxProcessor/NotifyHub.OutboxProcessor.WebApi/Dockerfile NotifyHub.OutboxProcessor
          docker push $IMAGE:latest
          docker push $IMAGE:$VERSION

  deploy-compose:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: [deploy-webapi, deploy-gateway, deploy-notification, deploy-outbox]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.14
        with:
          versionSpec: '6.2.x'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.14

      - name: Make generate-compose.sh executable
        run: chmod +x ./prod/generate-compose.sh

      - name: Generate docker-compose.yml for release
        run: |
          VERSION=${{ steps.gitversion.outputs.semVer }}
          mkdir -p prod
          ./prod/generate-compose.sh $VERSION

      - name: Create GitHub Release with docker-compose
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.gitversion.outputs.semVer }}
          name: Release ${{ steps.gitversion.outputs.semVer }}
          files: prod/docker-compose.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-nuget:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    needs: deploy-compose
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./NotifyHub.Kafka/NotifyHub.Kafka/NotifyHub.Kafka.csproj

      - name: Build project in Release
        run: dotnet build ./NotifyHub.Kafka/NotifyHub.Kafka/NotifyHub.Kafka.csproj -c Release --no-restore

      - name: Pack NuGet package
        run: dotnet pack ./NotifyHub.Kafka/NotifyHub.Kafka/NotifyHub.Kafka.csproj -c Release --no-build -o ./nupkg

      - name: Publish package to NuGet.org
        uses: NuGet/setup-nuget@v1
      - run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Setup nuget config for GitHub Packages
        run: |
          dotnet nuget add source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" -n github -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text

      - name: Publish package to GitHub Packages
        run: dotnet nuget push ./nupkg/*.nupkg --source github --skip-duplicate